<%- include('../partials/head') %>

<div class="update-account-container">
  <div class="page-header">
    <h1 class="page-title">
      <%= title %>
    </h1>
    <p class="page-subtitle">Update your account information and manage your password</p>
  </div>

  <% if (messages) { %>
    <div class="alert-container">
      <%- messages() %>
    </div>
  <% } %>

  <% if (errors) { %>
    <div class="alert alert-error">
      <div class="alert-icon">⚠️</div>
      <div class="alert-content">
        <h4>Please fix the following errors:</h4>
        <ul>
        <% errors.array().forEach(error => { %>
          <li><%= error.msg %></li>
        <% }); %>
        </ul>
      </div>
    </div>
  <% } %>

  <div class="forms-grid">
    <!-- Account Information Card -->
    <div class="card">
      <div class="card-body">
        <h2 class="section-title">
          <div class="icon-info"></div>
          Account Information
        </h2>
        <p class="section-subtitle">Update your personal details</p>
        
        <form id="accountUpdateForm" action="/account/update-info/" method="post" class="modern-form">
          <div class="form-row">
            <div class="form-group">
              <label for="account_firstname" class="form-label">
                First Name
              </label>
              <input 
                type="text" 
                name="account_firstname" 
                id="account_firstname" 
                class="form-input"
                placeholder="Enter your first name" 
                required
                minlength="1"
                value="<%= locals.account_firstname || '' %>"
              >
              <div class="validation-message" id="firstname-validation"></div>
            </div>
            
            <div class="form-group">
              <label for="account_lastname" class="form-label">
                Last Name
              </label>
              <input 
                type="text" 
                name="account_lastname" 
                id="account_lastname" 
                class="form-input"
                placeholder="Enter your last name" 
                required
                minlength="1"
                value="<%= locals.account_lastname || '' %>"
              >
              <div class="validation-message" id="lastname-validation"></div>
            </div>
          </div>
          
          <div class="form-group">
            <label for="account_email" class="form-label">
              Email Address
            </label>
            <input 
              type="email" 
              name="account_email" 
              id="account_email" 
              class="form-input"
              placeholder="Enter your email address" 
              required
              value="<%= locals.account_email || '' %>"
            >
            <div class="validation-message" id="email-validation"></div>
          </div>
          
          <input type="hidden" name="account_id" value="<%= locals.account_id %>">
          
          <button type="submit" class="btn btn-primary btn-large">
            Update Account
          </button>
        </form>
      </div>
    </div>

    <!-- Password Change Card -->
    <div class="card">
      <div class="card-body">
        <h2 class="section-title">
          <div class="icon-lock"></div>
          Change Password
        </h2>
        <p class="section-subtitle">Enhance your account security</p>
        
        <div class="password-requirements">
          <h4 class="requirements-title">
            Password Requirements
          </h4>
          <div class="requirements-grid">
            <div class="requirement-item" data-rule="length">
              <span class="requirement-icon">✗</span>
              <span class="requirement-text">At least 12 characters</span>
            </div>
            <div class="requirement-item" data-rule="uppercase">
              <span class="requirement-icon">✗</span>
              <span class="requirement-text">One uppercase letter</span>
            </div>
            <div class="requirement-item" data-rule="lowercase">
              <span class="requirement-icon">✗</span>
              <span class="requirement-text">One lowercase letter</span>
            </div>
            <div class="requirement-item" data-rule="number">
              <span class="requirement-icon">✗</span>
              <span class="requirement-text">One number</span>
            </div>
            <div class="requirement-item" data-rule="special">
              <span class="requirement-icon">✗</span>
              <span class="requirement-text">One special character</span>
            </div>
          </div>
          <div class="password-note">
            <div class="icon-info-circle"></div>
            <em>Changing your password will replace your current password immediately.</em>
          </div>
        </div>
        
        <form id="passwordChangeForm" action="/account/update-password/" method="post" class="modern-form">
          <div class="form-group">
            <label for="account_password" class="form-label">
              <div class="icon-key"></div>
              New Password
            </label>
            <div class="password-input-container">
              <input 
                type="password" 
                name="account_password" 
                id="account_password" 
                class="form-input password-input"
                placeholder="Enter your new password" 
                required
                minlength="12"
                pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{12,}$"
                title="Password must meet all requirements above"
              >
              <button type="button" class="password-toggle" id="togglePassword">
                <div class="icon-eye"></div>
              </button>
            </div>
            <div class="password-strength-bar">
              <div class="strength-fill" id="strengthFill"></div>
            </div>
            <div class="password-strength-text" id="strengthText">Enter a password</div>
            <div class="validation-message" id="password-validation"></div>
          </div>
          
          <input type="hidden" name="account_id" value="<%= locals.account_id %>">
          
          <button type="submit" class="btn btn-secondary btn-large">
            Change Password
          </button>
        </form>
      </div>
    </div>
  </div>

  <div class="navigation-section">
    <a href="/account/" class="nav-link">
      <div class="icon-arrow-left"></div>
      Back to Account Management
    </a>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Password toggle functionality
  const togglePassword = document.getElementById('togglePassword');
  const passwordInput = document.getElementById('account_password');
  
  togglePassword.addEventListener('click', function() {
    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
    passwordInput.setAttribute('type', type);
    this.innerHTML = type === 'password' ? '<div class="icon-eye"></div>' : '<div class="icon-eye-off"></div>';
  });

  // Account Update Form Validation
  const accountForm = document.getElementById('accountUpdateForm');
  const accountInputs = {
    firstname: document.getElementById('account_firstname'),
    lastname: document.getElementById('account_lastname'),
    email: document.getElementById('account_email')
  };
  
  const accountValidation = {
    firstname: document.getElementById('firstname-validation'),
    lastname: document.getElementById('lastname-validation'),
    email: document.getElementById('email-validation')
  };
  
  function validateAccountField(field, value, validationRules) {
    const message = accountValidation[field];
    const input = accountInputs[field];
    
    for (let rule of validationRules) {
      if (!rule.test(value)) {
        message.textContent = rule.message;
        message.className = 'validation-message error';
        input.classList.add('invalid');
        input.classList.remove('valid');
        return false;
      }
    }
    
    message.textContent = '';
    message.className = 'validation-message';
    input.classList.remove('invalid');
    input.classList.add('valid');
    return true;
  }
  
  const accountValidationRules = {
    firstname: [
      { test: (v) => v.trim() !== '', message: 'First name is required' },
      { test: (v) => v.length >= 1, message: 'First name must be at least 1 character' }
    ],
    lastname: [
      { test: (v) => v.trim() !== '', message: 'Last name is required' },
      { test: (v) => v.length >= 1, message: 'Last name must be at least 1 character' }
    ],
    email: [
      { test: (v) => v.trim() !== '', message: 'Email is required' },
      { test: (v) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v), message: 'Please enter a valid email address' }
    ]
  };
  
  // Add event listeners for account form
  Object.keys(accountInputs).forEach(field => {
    accountInputs[field].addEventListener('input', function() {
      validateAccountField(field, this.value, accountValidationRules[field]);
    });
    
    accountInputs[field].addEventListener('blur', function() {
      validateAccountField(field, this.value, accountValidationRules[field]);
    });
  });
  
  accountForm.addEventListener('submit', function(e) {
    let isValid = true;
    Object.keys(accountInputs).forEach(field => {
      if (!validateAccountField(field, accountInputs[field].value, accountValidationRules[field])) {
        isValid = false;
      }
    });
    
    if (!isValid) {
      e.preventDefault();
    }
  });
  
  // Password validation with visual feedback
  const passwordForm = document.getElementById('passwordChangeForm');
  const passwordValidation = document.getElementById('password-validation');
  const strengthFill = document.getElementById('strengthFill');
  const strengthText = document.getElementById('strengthText');
  
  const requirements = {
    length: { test: (v) => v.length >= 12, element: document.querySelector('[data-rule="length"]') },
    uppercase: { test: (v) => /[A-Z]/.test(v), element: document.querySelector('[data-rule="uppercase"]') },
    lowercase: { test: (v) => /[a-z]/.test(v), element: document.querySelector('[data-rule="lowercase"]') },
    number: { test: (v) => /\d/.test(v), element: document.querySelector('[data-rule="number"]') },
    special: { test: (v) => /[@$!%*?&]/.test(v), element: document.querySelector('[data-rule="special"]') }
  };
  
  function updatePasswordStrength() {
    const value = passwordInput.value;
    let score = 0;
    
    Object.keys(requirements).forEach(key => {
      const req = requirements[key];
      const met = req.test(value);
      const icon = req.element.querySelector('.requirement-icon');
      
      if (met) {
        score++;
        req.element.classList.add('met');
        icon.textContent = '✓';
      } else {
        req.element.classList.remove('met');
        icon.textContent = '✗';
      }
    });
    
    // Update strength bar
    const percentage = (score / 5) * 100;
    strengthFill.style.width = percentage + '%';
    
    // Update strength text and color
    if (score === 0) {
      strengthText.textContent = 'Enter a password';
      strengthFill.className = 'strength-fill';
    } else if (score < 3) {
      strengthText.textContent = 'Weak';
      strengthFill.className = 'strength-fill weak';
    } else if (score < 5) {
      strengthText.textContent = 'Good';
      strengthFill.className = 'strength-fill good';
    } else {
      strengthText.textContent = 'Strong';
      strengthFill.className = 'strength-fill strong';
    }
    
    // Validation message
    if (score === 5) {
      passwordValidation.textContent = '';
      passwordInput.classList.remove('invalid');
      passwordInput.classList.add('valid');
      return true;
    } else if (value.length > 0) {
      passwordValidation.textContent = 'Password must meet all requirements above';
      passwordValidation.className = 'validation-message error';
      passwordInput.classList.add('invalid');
      passwordInput.classList.remove('valid');
      return false;
    } else {
      passwordValidation.textContent = '';
      passwordInput.classList.remove('invalid', 'valid');
      return false;
    }
  }
  
  passwordInput.addEventListener('input', updatePasswordStrength);
  passwordInput.addEventListener('blur', updatePasswordStrength);
  
  passwordForm.addEventListener('submit', function(e) {
    if (!updatePasswordStrength()) {
      e.preventDefault();
      passwordInput.focus();
    }
  });
});
</script>